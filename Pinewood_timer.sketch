// Pin assignments
const int lane1Sensor = 2; // Input pin for Lane 1 sensor
const int lane2Sensor = 3; // Input pin for Lane 2 sensor
const int lane1LED = 4;    // Output pin for Lane 1 LED
const int lane2LED = 5;    // Output pin for Lane 2 LED

bool raceInProgress = true;

void setup() {
  // Initialize sensor pins as inputs with pull-up resistors
  pinMode(lane1Sensor, INPUT_PULLUP);
  pinMode(lane2Sensor, INPUT_PULLUP);

  // Initialize LED pins as outputs
  pinMode(lane1LED, OUTPUT);
  pinMode(lane2LED, OUTPUT);

  // Start Serial Monitor for debugging
  Serial.begin(9600);

  // Indicate readiness by ensuring all LEDs are off
  digitalWrite(lane1LED, LOW);
  digitalWrite(lane2LED, LOW);
  Serial.println("System ready for a race!");
}

void loop() {
  // Check if a race is in progress
  if (raceInProgress) {
    // Check Lane 1 finish
    if (digitalRead(lane1Sensor) == LOW) {
      Serial.println("Lane 1 Wins!");
      blinkLED(lane1LED, 30000); // Blink Lane 1 LED for 30 seconds
      resetSystem();
    }

    // Check Lane 2 finish
    else if (digitalRead(lane2Sensor) == LOW) {
      Serial.println("Lane 2 Wins!");
      blinkLED(lane2LED, 30000); // Blink Lane 2 LED for 30 seconds
      resetSystem();
    }
  }

  delay(100); // Small delay for debounce and processing efficiency
}

// Function to blink the LED for a specified duration
void blinkLED(int ledPin, int duration) {
  unsigned long startTime = millis();
  while (millis() - startTime < duration) {
    digitalWrite(ledPin, HIGH);
    delay(500);
    digitalWrite(ledPin, LOW);
    delay(500);
  }
}

// Function to reset the system for the next race
void resetSystem() {
  // Turn off all LEDs
  digitalWrite(lane1LED, LOW);
  digitalWrite(lane2LED, LOW);

  raceInProgress = true; // Reset race flag
  Serial.println("System reset. Ready for the next race!");
  delay(2000); // Add delay to stabilize the system
}
